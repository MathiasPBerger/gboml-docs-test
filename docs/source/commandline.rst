Command Line Interface
======================

.. code-block:: bash

   gboml <file> <options>

where :math:`\texttt{<file>}` is the name of the file to be considered and :math:`\texttt{<options>}` corresponds to one or several optional flags that can be activated.

The options are the following :

* *Print tokens*: the tokens output by the lexer can be printed with:

.. code-block:: bash

   --lex

* *Print the syntax tree*: the syntax tree generated by the parser can be printed with:

.. code-block:: bash

   --parser

* *Print the matrices*: the coefficient, right-hand side and objective matrices and vectors can be printed with:

.. code-block:: bash

   --matrix

 * *Linprog*: the linprog solver can be used with:

 .. code-block:: bash

    --linprog

The `linprog <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html>`_ solver for (continuous) linear programming comes with scipy and therefore does not require any installation or license. It is much less powerful than other solver options 
and is therefore only recommended for testing purposes (e.g., make sure that GBOML was properly installed).

* *Gurobi*: Gurobi can be invoked with:

.. code-block:: bash

   --gurobi

* *CPLEX*: CPLEX can be used with:

.. code-block:: bash

   --cplex

* *Xpress*: Xpress can be used with:

.. code-block:: bash

  --xpress

* *Cbc/Clp*: Cbc/Clp can be used with:

.. code-block:: bash

   --clp

* *DSP Extensive form*: DSP's Extensive Form solve (experimental) can be used with:

.. code-block:: bash

   --dsp_de

* *DSP Dantzig-Wolf*: DSP's Dantzig-Wolf algorithm (experimental) can be invoked with:

.. code-block:: bash

   --dsp_dw

* *CSV*: the solution can be printed to a CSV file with:

.. code-block:: bash

   --csv

* *JSON*: the solution can be printed to a JSON file with:

.. code-block:: bash

   --json

* *Detailed JSON*: the solution provided by the solver along with auxiliary information (e.g., dual variables, slacks or basis ranges) can be printed to a JSON file with:

.. code-block:: bash

	--detailed_json

* *Multi-processing*: the number of processes used for model generation can be controlled via:

.. code-block:: bash

	--nb_processes <number>

where :math:`\texttt{<number>}` is an integer, whose default value is 1

* *Output*: the name of the output file can be defined with:

.. code-block:: bash

	--output <output_filename>

where :math:`\texttt{<output_filename>}` is the output filename without the extension (CSV or JSON). The default output name is the name of the GBOML file with the date and chosen extension.
